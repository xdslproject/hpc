#!/usr/bin/env python3.8

import argparse
import ast
from io import IOBase

from xdsl.ir import MLContext
from xdsl.dialects.builtin import ModuleOp

#from psy.psy_ast_to_psy_flat import psy_ast_to_psy_flat
from ftn.ftn_ast_to_ftn_dag import ftn_ast_to_ftn_dag
from ftn.bind_procedures import bind_procedures
from ftn.unbind_procedures import unbind_procedures
from ftn.ftn_printer import print_fortran
from psy.gpu_printer import print_openacc

from ftn.dialects.ftn_ast import ftnAST
from ftn.dialects.ftn_dag import ftnDAG
#from psy.dialects.psy_flat import PsyFlat
from psy.apply_gpu_analysis import apply_gpu_analysis
from psy.determine_pgas_dependencies import apply_pgas_analysis
from psy.util.semantic_error import SemanticError

from typing import Callable, Dict, List

from xdsl.xdsl_opt_main import xDSLOptMain

class PsyOptMain(xDSLOptMain):

    passes_native = [       

        # IR Generation        
        ftn_ast_to_ftn_dag,
        bind_procedures,
        unbind_procedures,
        apply_gpu_analysis,
        apply_pgas_analysis
    ]

    def register_all_passes(self):
        self.available_passes = self.get_passes_as_dict()

    def _output_fortran(prog: ModuleOp, output: IOBase):
        print_fortran(prog.ops, stream=output)

    def register_all_targets(self):
        super().register_all_targets()
        self.available_targets['fortran'] = lambda prog, output: print_fortran(prog.ops, stream=output)
        self.available_targets['fortran-openacc'] = lambda prog, output: print_openacc(prog.ops, stream=output)

    def setup_pipeline(self):        
      super().setup_pipeline()        

    def register_all_dialects(self):
        super().register_all_dialects()
        """Register all dialects that can be used."""        
        ftn_ast = ftnAST(self.ctx)
        ftn_dag = ftnDAG(self.ctx)
        #psy_flat = PsyFlat(self.ctx)        

    @staticmethod
    def get_passes_as_dict(
    ) -> Dict[str, Callable[[MLContext, ModuleOp], None]]:
        """Add all passes that can be called by psy-opt in a dictionary."""

        pass_dictionary = {}

        passes = PsyOptMain.passes_native

        for pass_function in passes:
            pass_dictionary[pass_function.__name__.replace(
                "_", "-")] = pass_function

        return pass_dictionary

    def get_passes_as_list(native=False, integrated=False) -> List[str]:
        """Add all passes that can be called by psy-opt in a dictionary."""

        pass_list = []
        
        passes = PsyOptMain.passes_native
        
        for pass_function in passes:
            pass_list.append(pass_function.__name__.replace("_", "-"))

        return pass_list

    def register_all_frontends(self):
        super().register_all_frontends()        

def __main__():
    psy_main = PsyOptMain()

    try:
        module = psy_main.parse_input()
        psy_main.apply_passes(module)
    except SyntaxError as e:
        print(e.get_message())
        exit(0)
    except SemanticError as e:
        print("Semantic error: %s" % str(e))
        exit(0)

    contents = psy_main.output_resulting_program(module)
    psy_main.print_to_output_stream(contents)


if __name__ == "__main__":
    __main__()
